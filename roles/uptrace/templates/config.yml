#jinja2: trim_blocks:False

##
## General Uptrace settings.
##
service:
  env: {{ env }}
  secret: {{ secret }}

site:
  # HTTP endpoint for the UI and DSN.
  # Unless you use a reverse proxy, the port here should match the port in the listen.http.addr.
  url: {{ site_url }}

##
## Addresses on which Uptrace receives gRPC and HTTP requests.
##
listen:
  # OTLP/HTTP API and Uptrace API with Vue UI.
  http:
    addr: ':443'

  # OTLP/gRPC API.
  grpc:
    addr: ':4317'

  # TLS configuration for both HTTP and gRPC. Uncomment to enable.
  #tls:
  #  cert_file: config/tls/uptrace.crt
  #  key_file: config/tls/uptrace.key

auth:
  disabled: false

  # The following users will be created on the first startup.
  users:
    - name: Admin
      email: admin@localhost.xxx
      password: admin

##
## ClickHouse database credentials.
##
ch_cluster:
  cluster: {{ ch_cluster }}
  distributed: {{ ch_distributed }}
  replicated: {{ ch_replicated }}

  shards:
  {% for shard in ch_shards %}
    - replicas:
    {% for host in groups['clickhouse_server'] %}
      {% if hostvars[host].ch_cluster == ch_cluster and hostvars[host].ch_shard == shard.name %}
      - addr: "{{ host }}:9000"
        user: "{{ ch_db_user }}"
        password: "{{ ch_db_password }}"
        database: "{{ ch_db_name }}"

        dial_timeout: 5s
        write_timeout: 5s

        max_execution_time: 30s
        query_settings:
          timeout_before_checking_execution_speed: 5
      {% endif %}
    {% endfor %}
  {% endfor %}

##
## Various options to tweak ClickHouse schema.
## For changes to take effect, you need reset the ClickHouse database with `ch reset`.
##
ch_schema:
  tiered_storage: true
  # Compression codec, for example, LZ4, ZSTD(3), or Default.
  compression: Default

  spans_index:
    storage_policy: 'default'
  spans_data:
    storage_policy: 'default'

  logs_index:
    storage_policy: 'default'
  logs_data:
    storage_policy: 'default'

  events_index:
    storage_policy: 'default'
  events_data:
    storage_policy: 'default'

  metrics:
    storage_policy: 'default'

##
## PostgreSQL database credentials.
##
pg:
  addr: "{{ groups.postgresql.0 }}:5432"
  user: "{{ pg_db_user }}"
  password: "{{ pg_db_password }}"
  database: "{{ pg_db_name }}"

  # TLS configuration. Uncomment to enable.
  #tls:
  #  insecure_skip_verify: true # only for self-signed certificates

  conn_pool_addr: "{{ groups.postgresql.0 }}:6543"

  replicas:
{%- for host in groups.postgresql %}
  {%- if hostvars[host].pg_replica_of is defined %}
    - {{ host }}:6543
  {%- endif %}
{%- endfor %}

##
## Redis database credentials for go-redis RedisRing client.
##
redis_cache:
  dial_timeout: "1s"
  read_timeout: "1s"
  write_timeout: "1s"

  addrs:
{%- for host in groups.redis_cache %}
    {{ hostvars[host].redis_node_id }}: "{{ host }}:{{ hostvars[host].redis_port|default(6379) }}"
{%- endfor %}

##
## TLS certificate issuance and renewal using Let's Encrypt.
##
certmagic:
  # Use Let's Encrypt to obtain certificates.
  enabled: {{ certmagic_enabled }}
  # Use Let's Encrypt staging environment.
  staging_ca: {{ certmagic_staging_ca }}
  http_challenge_addr: ':80'

##
## Spans processing options.
##
spans:
  # Max number of goroutines processing spans.
  # Default is GOMAXPROCS.
  #max_threads: 10

  # Max number of spans to insert in a single query.
  #max_insert_size: 10000

  # Max number of buffered spans. If the buffer is full, spans are dropped.
  # Default scales linearly with max_threads.
  #max_buffered_records: 100e3

##
## Logs processing options.
##
logs:
  # Max number of goroutines processing logs.
  # Default is GOMAXPROCS.
  #max_threads: 10

  # Max number of logs to insert in a single query.
  #max_insert_size: 10000

  # Max number of buffered logs. If the buffer is full, logs are dropped.
  # Default scales linearly with max_threads.
  #max_buffered_records: 100e3

##
## Events processing options.
##
events:
  # Max number of goroutines processing events.
  # Default is GOMAXPROCS.
  #max_threads: 10

  # Max number of events to insert in a single query.
  #max_insert_size: 10000

  # Max number of buffered events. If the buffer is full, events are dropped.
  # Default scales linearly with max_threads.
  #max_buffered_records: 100e3

##
## Metrics processing options.
##
metrics:
  # Max number of goroutines processing datapoints.
  # Default is GOMAXPROCS.
  #max_threads: 10

  # Max number of datapoints to insert in a single query.
  #max_insert_size: 10000

  # Max number of buffered datapoints. If the buffer is full, datapoints are dropped.
  # Default scales linearly with max_threads.
  #max_buffered_records: 100e3

  # Max number of cumulative timeseries to convert into delta timeseries.
  # Default scales linearly with max_threads.
  #max_cumulative_timeseries: 1e6

##
## Trace constructing limits.
##
trace:
  # Max number of spans, logs, and events to select.
  #query_limit: 200_000

  # Max number of bytes to select.
  #max_memory_usage_bytes: 200_000_000

###
### Alerting options.
###
alerting:
  # Uncomment to disable monitors and notifications.
  #disabled: true

###
### Service graph processing options.
###
service_graph:
  # Uncomment to disable.
  # disabled: true

##
## Sourcemaps processing options for JavaScript errors.
## Sourcemaps require Internet access to download source maps.
##
sourcemaps:
  # Uncomment to disable.
  # disabled: true

##
## uptrace-go client configuration.
## Uptrace sends internal telemetry here.
##
uptrace_go:
  # Uncomment to disable.
  #disabled: true
  dsn: "{{ uptrace_dsn }}"

##
## Simple Email Service options.
##
mailer:
  smtp:
    # Whether to use this mailer for sending emails.
    enabled: true
    # SMTP server host.
    host: localhost
    # SMTP server port.
    port: 1025
    # Username for authentication.
    username: mailhog
    # Password for authentication.
    password: mailhog
    # Uncomment to disable opportunistic TLS.
    #tls: { disabled: true }
    # Emails will be send from this address.
    from: 'uptrace@localhost'

##
## Token for the Telegram bot that will be sending notifications to Telegram channels.
## Required if you are planning to use Telegram for notifications.
##
telegram:
  bot_token: ""

##
## Logging configuration options.
##
logging:
  # Valid values: DEBUG, INFO, WARN, ERROR.
  level: INFO

##
## License options. A license is required to enable premium features.
## See https://uptrace.dev/get/hosted#premium-edition for details.
##
license:
  key: '{{ uptrace_license }}'
